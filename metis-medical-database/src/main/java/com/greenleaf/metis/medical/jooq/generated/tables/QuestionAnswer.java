/*
 * This file is generated by jOOQ.
 */
package com.greenleaf.metis.medical.jooq.generated.tables;


import com.greenleaf.metis.medical.jooq.generated.Keys;
import com.greenleaf.metis.medical.jooq.generated.Public;
import com.greenleaf.metis.medical.jooq.generated.tables.records.QuestionAnswerRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class QuestionAnswer extends TableImpl<QuestionAnswerRecord> {

    private static final long serialVersionUID = -2033372286;

    /**
     * The reference instance of <code>public.question_answer</code>
     */
    public static final QuestionAnswer QUESTION_ANSWER = new QuestionAnswer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionAnswerRecord> getRecordType() {
        return QuestionAnswerRecord.class;
    }

    /**
     * The column <code>public.question_answer.question_id</code>.
     */
    public final TableField<QuestionAnswerRecord, Short> QUESTION_ID = createField("question_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.question_answer.answer_id</code>.
     */
    public final TableField<QuestionAnswerRecord, Short> ANSWER_ID = createField("answer_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * Create a <code>public.question_answer</code> table reference
     */
    public QuestionAnswer() {
        this(DSL.name("question_answer"), null);
    }

    /**
     * Create an aliased <code>public.question_answer</code> table reference
     */
    public QuestionAnswer(String alias) {
        this(DSL.name(alias), QUESTION_ANSWER);
    }

    /**
     * Create an aliased <code>public.question_answer</code> table reference
     */
    public QuestionAnswer(Name alias) {
        this(alias, QUESTION_ANSWER);
    }

    private QuestionAnswer(Name alias, Table<QuestionAnswerRecord> aliased) {
        this(alias, aliased, null);
    }

    private QuestionAnswer(Name alias, Table<QuestionAnswerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> QuestionAnswer(Table<O> child, ForeignKey<O, QuestionAnswerRecord> key) {
        super(child, key, QUESTION_ANSWER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<QuestionAnswerRecord> getPrimaryKey() {
        return Keys.QA_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QuestionAnswerRecord>> getKeys() {
        return Arrays.<UniqueKey<QuestionAnswerRecord>>asList(Keys.QA_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<QuestionAnswerRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<QuestionAnswerRecord, ?>>asList(Keys.QUESTION_ANSWER__QUESTION_ANSWER_QUESTION_FK, Keys.QUESTION_ANSWER__QUESTION_ANSWER_ANSWER_FK);
    }

    public Question question() {
        return new Question(this, Keys.QUESTION_ANSWER__QUESTION_ANSWER_QUESTION_FK);
    }

    public Answer answer() {
        return new Answer(this, Keys.QUESTION_ANSWER__QUESTION_ANSWER_ANSWER_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuestionAnswer as(String alias) {
        return new QuestionAnswer(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public QuestionAnswer as(Name alias) {
        return new QuestionAnswer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionAnswer rename(String name) {
        return new QuestionAnswer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public QuestionAnswer rename(Name name) {
        return new QuestionAnswer(name, null);
    }
}

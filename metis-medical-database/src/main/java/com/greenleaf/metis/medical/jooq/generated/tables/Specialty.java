/*
 * This file is generated by jOOQ.
 */
package com.greenleaf.metis.medical.jooq.generated.tables;


import com.greenleaf.metis.medical.jooq.generated.Keys;
import com.greenleaf.metis.medical.jooq.generated.Public;
import com.greenleaf.metis.medical.jooq.generated.tables.records.SpecialtyRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Specialty extends TableImpl<SpecialtyRecord> {

    private static final long serialVersionUID = -1594701038;

    /**
     * The reference instance of <code>public.specialty</code>
     */
    public static final Specialty SPECIALTY = new Specialty();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SpecialtyRecord> getRecordType() {
        return SpecialtyRecord.class;
    }

    /**
     * The column <code>public.specialty.id</code>.
     */
    public final TableField<SpecialtyRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('specialty_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.specialty.name</code>.
     */
    public final TableField<SpecialtyRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.specialty</code> table reference
     */
    public Specialty() {
        this(DSL.name("specialty"), null);
    }

    /**
     * Create an aliased <code>public.specialty</code> table reference
     */
    public Specialty(String alias) {
        this(DSL.name(alias), SPECIALTY);
    }

    /**
     * Create an aliased <code>public.specialty</code> table reference
     */
    public Specialty(Name alias) {
        this(alias, SPECIALTY);
    }

    private Specialty(Name alias, Table<SpecialtyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Specialty(Name alias, Table<SpecialtyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Specialty(Table<O> child, ForeignKey<O, SpecialtyRecord> key) {
        super(child, key, SPECIALTY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SpecialtyRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SPECIALTY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SpecialtyRecord> getPrimaryKey() {
        return Keys.SPECIALTY_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SpecialtyRecord>> getKeys() {
        return Arrays.<UniqueKey<SpecialtyRecord>>asList(Keys.SPECIALTY_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Specialty as(String alias) {
        return new Specialty(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Specialty as(Name alias) {
        return new Specialty(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Specialty rename(String name) {
        return new Specialty(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Specialty rename(Name name) {
        return new Specialty(name, null);
    }
}

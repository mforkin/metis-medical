/*
 * This file is generated by jOOQ.
 */
package com.greenleaf.metis.medical.jooq.generated.tables;


import com.greenleaf.metis.medical.jooq.generated.Keys;
import com.greenleaf.metis.medical.jooq.generated.Public;
import com.greenleaf.metis.medical.jooq.generated.tables.records.StageRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Stage extends TableImpl<StageRecord> {

    private static final long serialVersionUID = -859031340;

    /**
     * The reference instance of <code>public.stage</code>
     */
    public static final Stage STAGE = new Stage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StageRecord> getRecordType() {
        return StageRecord.class;
    }

    /**
     * The column <code>public.stage.id</code>.
     */
    public final TableField<StageRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('stage_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.stage.name</code>.
     */
    public final TableField<StageRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.stage.seq</code>.
     */
    public final TableField<StageRecord, Short> SEQ = createField("seq", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>public.stage.question_id</code>.
     */
    public final TableField<StageRecord, Short> QUESTION_ID = createField("question_id", org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * Create a <code>public.stage</code> table reference
     */
    public Stage() {
        this(DSL.name("stage"), null);
    }

    /**
     * Create an aliased <code>public.stage</code> table reference
     */
    public Stage(String alias) {
        this(DSL.name(alias), STAGE);
    }

    /**
     * Create an aliased <code>public.stage</code> table reference
     */
    public Stage(Name alias) {
        this(alias, STAGE);
    }

    private Stage(Name alias, Table<StageRecord> aliased) {
        this(alias, aliased, null);
    }

    private Stage(Name alias, Table<StageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Stage(Table<O> child, ForeignKey<O, StageRecord> key) {
        super(child, key, STAGE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<StageRecord, Integer> getIdentity() {
        return Keys.IDENTITY_STAGE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StageRecord> getPrimaryKey() {
        return Keys.STAGE_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StageRecord>> getKeys() {
        return Arrays.<UniqueKey<StageRecord>>asList(Keys.STAGE_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<StageRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StageRecord, ?>>asList(Keys.STAGE__STAGE_QUESTION_FK);
    }

    public Question question() {
        return new Question(this, Keys.STAGE__STAGE_QUESTION_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Stage as(String alias) {
        return new Stage(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Stage as(Name alias) {
        return new Stage(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Stage rename(String name) {
        return new Stage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Stage rename(Name name) {
        return new Stage(name, null);
    }
}
